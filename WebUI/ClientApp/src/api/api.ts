// tslint:disable
/**
 * FORFarm API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as globalImportUrl from 'url';
import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import {
    BASE_PATH,
    COLLECTION_FORMATS,
    RequestArgs,
    BaseAPI,
    RequiredError
} from './base';

/**
 *
 * @export
 * @interface AccountVm
 */
export interface AccountVm {
    /**
     *
     * @type {number}
     * @memberof AccountVm
     */
    id: number;
    /**
     *
     * @type {string}
     * @memberof AccountVm
     */
    username: string;
    /**
     *
     * @type {string}
     * @memberof AccountVm
     */
    password: string;
    /**
     *
     * @type {boolean}
     * @memberof AccountVm
     */
    mule: boolean;
    /**
     *
     * @type {Date}
     * @memberof AccountVm
     */
    memberExpirationDate: Date;
    /**
     *
     * @type {boolean}
     * @memberof AccountVm
     */
    banned: boolean;
    /**
     *
     * @type {number}
     * @member AccountVm
     */
    totalLevel: number;
    /**
     *
     * @type {Array<Skill>}
     * @memberof AccountVm
     */
    skills: Array<Skill>;
    /**
     *
     * @type {number}
     * @memberof AccountVm
     */
    goldEarned: number;
    /**
     *
     * @type {number}
     * @memberof AccountVm
     */
    runtimeMinutes: number;
    /**
     *
     * @type {number}
     * @memberof AccountVm
     */
    proxyId?: number;
}
/**
 *
 * @export
 * @interface BotVm
 */
export interface BotVm {
    /**
     *
     * @type {number}
     * @memberof BotVm
     */
    accountId: number;
    /**
     *
     * @type {number}
     * @memberof BotVm
     */
    proxyId?: number;
    /**
     *
     * @type {Date}
     * @memberof BotVm
     */
    startTime: Date;
    /**
     *
     * @type {Date}
     * @memberof BotVm
     */
    lastUpdate: Date;
    /**
     *
     * @type {Date}
     * @memberof BotVm
     */
    lastMule: Date;
    /**
     *
     * @type {number}
     * @memberof BotVm
     */
    goldEarned: number;
}
/**
 *
 * @export
 * @interface CreateAccount
 */
export interface CreateAccount {
    /**
     *
     * @type {string}
     * @memberof CreateAccount
     */
    username?: string;
    /**
     *
     * @type {string}
     * @memberof CreateAccount
     */
    password?: string;
    /**
     *
     * @type {boolean}
     * @memberof CreateAccount
     */
    mule: boolean;
    /**
     *
     * @type {number}
     * @memberof CreateAccount
     */
    remainingMembershipDays: number;
}
/**
 *
 * @export
 * @interface CreateProxy
 */
export interface CreateProxy {
    /**
     *
     * @type {string}
     * @memberof CreateProxy
     */
    ip: string;
    /**
     *
     * @type {number}
     * @memberof CreateProxy
     */
    port: number;
    /**
     *
     * @type {string}
     * @memberof CreateProxy
     */
    username?: string;
    /**
     *
     * @type {string}
     * @memberof CreateProxy
     */
    password?: string;
}
/**
 *
 * @export
 * @interface MuleVm
 */
export interface MuleVm {
    /**
     *
     * @type {number}
     * @memberof MuleVm
     */
    accountId: number;
    /**
     *
     * @type {number}
     * @memberof MuleVm
     */
    proxyId?: number;
    /**
     *
     * @type {Date}
     * @memberof MuleVm
     */
    startTime: Date;
    /**
     *
     * @type {Date}
     * @memberof MuleVm
     */
    lastUpdate: Date;
    /**
     *
     * @type {number}
     * @memberof MuleVm
     */
    gold: number;
    /**
     *
     * @type {number}
     * @memberof MuleVm
     */
    world: number;
    /**
     *
     * @type {Position}
     * @memberof MuleVm
     */
    position?: Position;
    /**
     *
     * @type {string}
     * @memberof MuleVm
     */
    displayName?: string;
    /**
     *
     * @type {boolean}
     * @memberof MuleVm
     */
    inGame: boolean;
}
/**
 *
 * @export
 * @interface Position
 */
export interface Position {
    /**
     *
     * @type {number}
     * @memberof Position
     */
    id: number;
    /**
     *
     * @type {number}
     * @memberof Position
     */
    x: number;
    /**
     *
     * @type {number}
     * @memberof Position
     */
    y: number;
    /**
     *
     * @type {number}
     * @memberof Position
     */
    z: number;
}
/**
 *
 * @export
 * @interface ProblemDetails
 */
export interface ProblemDetails {
    /**
     *
     * @type {string}
     * @memberof ProblemDetails
     */
    type?: string;
    /**
     *
     * @type {string}
     * @memberof ProblemDetails
     */
    title?: string;
    /**
     *
     * @type {number}
     * @memberof ProblemDetails
     */
    status?: number;
    /**
     *
     * @type {string}
     * @memberof ProblemDetails
     */
    detail?: string;
    /**
     *
     * @type {string}
     * @memberof ProblemDetails
     */
    instance?: string;
    /**
     *
     * @type {{ [key: string]: object; }}
     * @memberof ProblemDetails
     */
    extensions?: { [key: string]: object };
}
/**
 *
 * @export
 * @interface ProxyVm
 */
export interface ProxyVm {
    /**
     *
     * @type {number}
     * @memberof ProxyVm
     */
    id: number;
    /**
     *
     * @type {string}
     * @memberof ProxyVm
     */
    ip?: string;
    /**
     *
     * @type {number}
     * @memberof ProxyVm
     */
    port: number;
    /**
     *
     * @type {number}
     * @memberof ProxyVm
     */
    used: boolean;
    /**
     *
     * @type {string}
     * @memberof ProxyVm
     */
    username?: string;
    /**
     *
     * @type {string}
     * @memberof ProxyVm
     */
    password?: string;
    /**
     *
     * @type {number}
     * @memberof ProxyVm
     */
    currentAccounts: number;
    /**
     *
     * @type {number}
     * @memberof ProxyVm
     */
    previousAccounts: number;
}
/**
 *
 * @export
 * @interface SettingsVm
 */
export interface SettingsVm {
    /**
     *
     * @type {number}
     * @memberof SettingsVm
     */
    launchSleep: number;
    /**
     *
     * @type {boolean}
     * @memberof SettingsVm
     */
    useProxies: boolean;
    /**
     *
     * @type {number}
     * @memberof SettingsVm
     */
    maxActiveBots: number;
    /**
     *
     * @type {number}
     * @memberof SettingsVm
     */
    minActiveMules: number;
    /**
     *
     * @type {number}
     * @memberof SettingsVm
     */
    maxActiveMules: number;
    /**
     *
     * @type {number}
     * @memberof SettingsVm
     */
    concurrentAccountsPerProxy: number;
    /**
     *
     * @type {number}
     * @memberof SettingsVm
     */
    maxAccountsPerProxy: number;
    /**
     *
     * @type {string}
     * @memberof SettingsVm
     */
    hostname?: string;
    /**
     *
     * @type {string}
     * @memberof SettingsVm
     */
    apiKey?: string;
    /**
     *
     * @type {string}
     * @memberof SettingsVm
     */
    botScriptName?: string;
    /**
     *
     * @type {string}
     * @memberof SettingsVm
     */
    muleScriptName?: string;
    /**
     *
     * @type {number}
     * @memberof SettingsVm
     */
    muleIntervalMinutes: number;
}
/**
 *
 * @export
 * @interface Skill
 */
export interface Skill {
    /**
     *
     * @type {SkillType}
     * @memberof Skill
     */
    type: SkillType;
    /**
     *
     * @type {number}
     * @memberof Skill
     */
    level: number;
}
/**
 *
 * @export
 * @interface SkillAllOf
 */
export interface SkillAllOf {
    /**
     *
     * @type {SkillType}
     * @memberof SkillAllOf
     */
    type: SkillType;
    /**
     *
     * @type {number}
     * @memberof SkillAllOf
     */
    level: number;
}
/**
 *
 * @export
 * @enum {string}
 */
export enum SkillType {
    NUMBER_1 = 1,
    NUMBER_2 = 2,
    NUMBER_3 = 3,
    NUMBER_4 = 4,
    NUMBER_5 = 5,
    NUMBER_6 = 6,
    NUMBER_7 = 7,
    NUMBER_8 = 8,
    NUMBER_9 = 9,
    NUMBER_10 = 10,
    NUMBER_11 = 11,
    NUMBER_12 = 12,
    NUMBER_13 = 13,
    NUMBER_14 = 14,
    NUMBER_15 = 15,
    NUMBER_16 = 16,
    NUMBER_17 = 17,
    NUMBER_18 = 18,
    NUMBER_19 = 19,
    NUMBER_20 = 20,
    NUMBER_21 = 21,
    NUMBER_22 = 22,
    NUMBER_23 = 23
}

/**
 *
 * @export
 * @interface StatusVm
 */
export interface StatusVm {
    /**
     *
     * @type {boolean}
     * @memberof StatusVm
     */
    running: boolean;
    /**
     *
     * @type {boolean}
     * @memberof StatusVm
     */
    canStart: boolean;
}
/**
 *
 * @export
 * @interface UpdateAccount
 */
export interface UpdateAccount {
    /**
     *
     * @type {number}
     * @memberof UpdateAccount
     */
    id: number;
    /**
     *
     * @type {string}
     * @memberof UpdateAccount
     */
    password: string;
    /**
     *
     * @type {boolean}
     * @memberof UpdateAccount
     */
    mule: boolean;
}
/**
 *
 * @export
 * @interface UpdateStatus
 */
export interface UpdateStatus {
    /**
     *
     * @type {boolean}
     * @memberof UpdateStatus
     */
    running: boolean;
}

/**
 * AccountsApi - axios parameter creator
 * @export
 */
export const AccountsApiAxiosParamCreator = function(
    configuration?: Configuration
) {
    return {
        /**
         *
         * @param {CreateAccount} createAccount
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsCreate(
            createAccount: CreateAccount,
            options: any = {}
        ): RequestArgs {
            // verify required parameter 'createAccount' is not null or undefined
            if (createAccount === null || createAccount === undefined) {
                throw new RequiredError(
                    'createAccount',
                    'Required parameter createAccount was null or undefined when calling accountsCreate.'
                );
            }
            const localVarPath = `/api/accounts`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = {
                method: 'POST',
                ...baseOptions,
                ...options
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {
                ...localVarUrlObj.query,
                ...localVarQueryParameter,
                ...options.query
            };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...options.headers
            };
            const needsSerialization =
                typeof createAccount !== 'string' ||
                localVarRequestOptions.headers['Content-Type'] ===
                    'application/json';
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(
                      createAccount !== undefined ? createAccount : {}
                  )
                : createAccount || '';

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsDelete(id: number, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    'id',
                    'Required parameter id was null or undefined when calling accountsDelete.'
                );
            }
            const localVarPath = `/api/accounts/{id}`.replace(
                `{${'id'}}`,
                encodeURIComponent(String(id))
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = {
                method: 'DELETE',
                ...baseOptions,
                ...options
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = {
                ...localVarUrlObj.query,
                ...localVarQueryParameter,
                ...options.query
            };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...options.headers
            };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsGetAll(options: any = {}): RequestArgs {
            const localVarPath = `/api/accounts`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = {
                method: 'GET',
                ...baseOptions,
                ...options
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = {
                ...localVarUrlObj.query,
                ...localVarQueryParameter,
                ...options.query
            };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...options.headers
            };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @param {UpdateAccount} updateAccount
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsUpdate(
            updateAccount: UpdateAccount,
            options: any = {}
        ): RequestArgs {
            // verify required parameter 'updateAccount' is not null or undefined
            if (updateAccount === null || updateAccount === undefined) {
                throw new RequiredError(
                    'updateAccount',
                    'Required parameter updateAccount was null or undefined when calling accountsUpdate.'
                );
            }
            const localVarPath = `/api/accounts`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = {
                method: 'PUT',
                ...baseOptions,
                ...options
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {
                ...localVarUrlObj.query,
                ...localVarQueryParameter,
                ...options.query
            };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...options.headers
            };
            const needsSerialization =
                typeof updateAccount !== 'string' ||
                localVarRequestOptions.headers['Content-Type'] ===
                    'application/json';
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(
                      updateAccount !== undefined ? updateAccount : {}
                  )
                : updateAccount || '';

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        }
    };
};

/**
 * AccountsApi - functional programming interface
 * @export
 */
export const AccountsApiFp = function(configuration?: Configuration) {
    return {
        /**
         *
         * @param {CreateAccount} createAccount
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsCreate(
            createAccount: CreateAccount,
            options?: any
        ): (
            axios?: AxiosInstance,
            basePath?: string
        ) => AxiosPromise<AccountVm> {
            const localVarAxiosArgs = AccountsApiAxiosParamCreator(
                configuration
            ).accountsCreate(createAccount, options);
            return (
                axios: AxiosInstance = globalAxios,
                basePath: string = BASE_PATH
            ) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsDelete(
            id: number,
            options?: any
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = AccountsApiAxiosParamCreator(
                configuration
            ).accountsDelete(id, options);
            return (
                axios: AxiosInstance = globalAxios,
                basePath: string = BASE_PATH
            ) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsGetAll(
            options?: any
        ): (
            axios?: AxiosInstance,
            basePath?: string
        ) => AxiosPromise<Array<AccountVm>> {
            const localVarAxiosArgs = AccountsApiAxiosParamCreator(
                configuration
            ).accountsGetAll(options);
            return (
                axios: AxiosInstance = globalAxios,
                basePath: string = BASE_PATH
            ) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {UpdateAccount} updateAccount
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsUpdate(
            updateAccount: UpdateAccount,
            options?: any
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = AccountsApiAxiosParamCreator(
                configuration
            ).accountsUpdate(updateAccount, options);
            return (
                axios: AxiosInstance = globalAxios,
                basePath: string = BASE_PATH
            ) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url
                };
                return axios.request(axiosRequestArgs);
            };
        }
    };
};

/**
 * AccountsApi - factory interface
 * @export
 */
export const AccountsApiFactory = function(
    configuration?: Configuration,
    basePath?: string,
    axios?: AxiosInstance
) {
    return {
        /**
         *
         * @param {CreateAccount} createAccount
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsCreate(
            createAccount: CreateAccount,
            options?: any
        ): AxiosPromise<AccountVm> {
            return AccountsApiFp(configuration).accountsCreate(
                createAccount,
                options
            )(axios, basePath);
        },
        /**
         *
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsDelete(id: number, options?: any): AxiosPromise<void> {
            return AccountsApiFp(configuration).accountsDelete(id, options)(
                axios,
                basePath
            );
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsGetAll(options?: any): AxiosPromise<Array<AccountVm>> {
            return AccountsApiFp(configuration).accountsGetAll(options)(
                axios,
                basePath
            );
        },
        /**
         *
         * @param {UpdateAccount} updateAccount
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsUpdate(
            updateAccount: UpdateAccount,
            options?: any
        ): AxiosPromise<void> {
            return AccountsApiFp(configuration).accountsUpdate(
                updateAccount,
                options
            )(axios, basePath);
        }
    };
};

/**
 * AccountsApi - object-oriented interface
 * @export
 * @class AccountsApi
 * @extends {BaseAPI}
 */
export class AccountsApi extends BaseAPI {
    /**
     *
     * @param {CreateAccount} createAccount
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    public accountsCreate(createAccount: CreateAccount, options?: any) {
        return AccountsApiFp(this.configuration).accountsCreate(
            createAccount,
            options
        )(this.axios, this.basePath);
    }

    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    public accountsDelete(id: number, options?: any) {
        return AccountsApiFp(this.configuration).accountsDelete(id, options)(
            this.axios,
            this.basePath
        );
    }

    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    public accountsGetAll(options?: any) {
        return AccountsApiFp(this.configuration).accountsGetAll(options)(
            this.axios,
            this.basePath
        );
    }

    /**
     *
     * @param {UpdateAccount} updateAccount
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    public accountsUpdate(updateAccount: UpdateAccount, options?: any) {
        return AccountsApiFp(this.configuration).accountsUpdate(
            updateAccount,
            options
        )(this.axios, this.basePath);
    }
}

/**
 * InstancesApi - axios parameter creator
 * @export
 */
export const InstancesApiAxiosParamCreator = function(
    configuration?: Configuration
) {
    return {
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        instancesGetAllBots(options: any = {}): RequestArgs {
            const localVarPath = `/api/instances/bots`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = {
                method: 'GET',
                ...baseOptions,
                ...options
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = {
                ...localVarUrlObj.query,
                ...localVarQueryParameter,
                ...options.query
            };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...options.headers
            };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        instancesGetAllMules(options: any = {}): RequestArgs {
            const localVarPath = `/api/instances/mules`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = {
                method: 'GET',
                ...baseOptions,
                ...options
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = {
                ...localVarUrlObj.query,
                ...localVarQueryParameter,
                ...options.query
            };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...options.headers
            };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        }
    };
};

/**
 * InstancesApi - functional programming interface
 * @export
 */
export const InstancesApiFp = function(configuration?: Configuration) {
    return {
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        instancesGetAllBots(
            options?: any
        ): (
            axios?: AxiosInstance,
            basePath?: string
        ) => AxiosPromise<Array<BotVm>> {
            const localVarAxiosArgs = InstancesApiAxiosParamCreator(
                configuration
            ).instancesGetAllBots(options);
            return (
                axios: AxiosInstance = globalAxios,
                basePath: string = BASE_PATH
            ) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        instancesGetAllMules(
            options?: any
        ): (
            axios?: AxiosInstance,
            basePath?: string
        ) => AxiosPromise<Array<MuleVm>> {
            const localVarAxiosArgs = InstancesApiAxiosParamCreator(
                configuration
            ).instancesGetAllMules(options);
            return (
                axios: AxiosInstance = globalAxios,
                basePath: string = BASE_PATH
            ) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url
                };
                return axios.request(axiosRequestArgs);
            };
        }
    };
};

/**
 * InstancesApi - factory interface
 * @export
 */
export const InstancesApiFactory = function(
    configuration?: Configuration,
    basePath?: string,
    axios?: AxiosInstance
) {
    return {
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        instancesGetAllBots(options?: any): AxiosPromise<Array<BotVm>> {
            return InstancesApiFp(configuration).instancesGetAllBots(options)(
                axios,
                basePath
            );
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        instancesGetAllMules(options?: any): AxiosPromise<Array<MuleVm>> {
            return InstancesApiFp(configuration).instancesGetAllMules(options)(
                axios,
                basePath
            );
        }
    };
};

/**
 * InstancesApi - object-oriented interface
 * @export
 * @class InstancesApi
 * @extends {BaseAPI}
 */
export class InstancesApi extends BaseAPI {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstancesApi
     */
    public instancesGetAllBots(options?: any) {
        return InstancesApiFp(this.configuration).instancesGetAllBots(options)(
            this.axios,
            this.basePath
        );
    }

    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstancesApi
     */
    public instancesGetAllMules(options?: any) {
        return InstancesApiFp(this.configuration).instancesGetAllMules(options)(
            this.axios,
            this.basePath
        );
    }
}

/**
 * ProxiesApi - axios parameter creator
 * @export
 */
export const ProxiesApiAxiosParamCreator = function(
    configuration?: Configuration
) {
    return {
        /**
         *
         * @param {CreateProxy} createProxy
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        proxiesCreate(
            createProxy: CreateProxy,
            options: any = {}
        ): RequestArgs {
            // verify required parameter 'createProxy' is not null or undefined
            if (createProxy === null || createProxy === undefined) {
                throw new RequiredError(
                    'createProxy',
                    'Required parameter createProxy was null or undefined when calling proxiesCreate.'
                );
            }
            const localVarPath = `/api/proxies`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = {
                method: 'POST',
                ...baseOptions,
                ...options
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {
                ...localVarUrlObj.query,
                ...localVarQueryParameter,
                ...options.query
            };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...options.headers
            };
            const needsSerialization =
                typeof createProxy !== 'string' ||
                localVarRequestOptions.headers['Content-Type'] ===
                    'application/json';
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(createProxy !== undefined ? createProxy : {})
                : createProxy || '';

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        proxiesDelete(id: number, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    'id',
                    'Required parameter id was null or undefined when calling proxiesDelete.'
                );
            }
            const localVarPath = `/api/proxies/{id}`.replace(
                `{${'id'}}`,
                encodeURIComponent(String(id))
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = {
                method: 'DELETE',
                ...baseOptions,
                ...options
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = {
                ...localVarUrlObj.query,
                ...localVarQueryParameter,
                ...options.query
            };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...options.headers
            };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        proxiesGetAll(options: any = {}): RequestArgs {
            const localVarPath = `/api/proxies`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = {
                method: 'GET',
                ...baseOptions,
                ...options
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = {
                ...localVarUrlObj.query,
                ...localVarQueryParameter,
                ...options.query
            };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...options.headers
            };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        }
    };
};

/**
 * ProxiesApi - functional programming interface
 * @export
 */
export const ProxiesApiFp = function(configuration?: Configuration) {
    return {
        /**
         *
         * @param {CreateProxy} createProxy
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        proxiesCreate(
            createProxy: CreateProxy,
            options?: any
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProxyVm> {
            const localVarAxiosArgs = ProxiesApiAxiosParamCreator(
                configuration
            ).proxiesCreate(createProxy, options);
            return (
                axios: AxiosInstance = globalAxios,
                basePath: string = BASE_PATH
            ) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        proxiesDelete(
            id: number,
            options?: any
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = ProxiesApiAxiosParamCreator(
                configuration
            ).proxiesDelete(id, options);
            return (
                axios: AxiosInstance = globalAxios,
                basePath: string = BASE_PATH
            ) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        proxiesGetAll(
            options?: any
        ): (
            axios?: AxiosInstance,
            basePath?: string
        ) => AxiosPromise<Array<ProxyVm>> {
            const localVarAxiosArgs = ProxiesApiAxiosParamCreator(
                configuration
            ).proxiesGetAll(options);
            return (
                axios: AxiosInstance = globalAxios,
                basePath: string = BASE_PATH
            ) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url
                };
                return axios.request(axiosRequestArgs);
            };
        }
    };
};

/**
 * ProxiesApi - factory interface
 * @export
 */
export const ProxiesApiFactory = function(
    configuration?: Configuration,
    basePath?: string,
    axios?: AxiosInstance
) {
    return {
        /**
         *
         * @param {CreateProxy} createProxy
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        proxiesCreate(
            createProxy: CreateProxy,
            options?: any
        ): AxiosPromise<ProxyVm> {
            return ProxiesApiFp(configuration).proxiesCreate(
                createProxy,
                options
            )(axios, basePath);
        },
        /**
         *
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        proxiesDelete(id: number, options?: any): AxiosPromise<void> {
            return ProxiesApiFp(configuration).proxiesDelete(id, options)(
                axios,
                basePath
            );
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        proxiesGetAll(options?: any): AxiosPromise<Array<ProxyVm>> {
            return ProxiesApiFp(configuration).proxiesGetAll(options)(
                axios,
                basePath
            );
        }
    };
};

/**
 * ProxiesApi - object-oriented interface
 * @export
 * @class ProxiesApi
 * @extends {BaseAPI}
 */
export class ProxiesApi extends BaseAPI {
    /**
     *
     * @param {CreateProxy} createProxy
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProxiesApi
     */
    public proxiesCreate(createProxy: CreateProxy, options?: any) {
        return ProxiesApiFp(this.configuration).proxiesCreate(
            createProxy,
            options
        )(this.axios, this.basePath);
    }

    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProxiesApi
     */
    public proxiesDelete(id: number, options?: any) {
        return ProxiesApiFp(this.configuration).proxiesDelete(id, options)(
            this.axios,
            this.basePath
        );
    }

    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProxiesApi
     */
    public proxiesGetAll(options?: any) {
        return ProxiesApiFp(this.configuration).proxiesGetAll(options)(
            this.axios,
            this.basePath
        );
    }
}

/**
 * SettingsApi - axios parameter creator
 * @export
 */
export const SettingsApiAxiosParamCreator = function(
    configuration?: Configuration
) {
    return {
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        settingsGet(options: any = {}): RequestArgs {
            const localVarPath = `/api/settings`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = {
                method: 'GET',
                ...baseOptions,
                ...options
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = {
                ...localVarUrlObj.query,
                ...localVarQueryParameter,
                ...options.query
            };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...options.headers
            };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @param {SettingsVm} settings
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        settingsUpdate(settings: SettingsVm, options: any = {}): RequestArgs {
            // verify required parameter 'settings' is not null or undefined
            if (settings === null || settings === undefined) {
                throw new RequiredError(
                    'settings',
                    'Required parameter settings was null or undefined when calling settingsUpdate.'
                );
            }
            const localVarPath = `/api/settings`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = {
                method: 'PUT',
                ...baseOptions,
                ...options
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {
                ...localVarUrlObj.query,
                ...localVarQueryParameter,
                ...options.query
            };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...options.headers
            };
            const needsSerialization =
                typeof settings !== 'string' ||
                localVarRequestOptions.headers['Content-Type'] ===
                    'application/json';
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(settings !== undefined ? settings : {})
                : settings || '';

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        }
    };
};

/**
 * SettingsApi - functional programming interface
 * @export
 */
export const SettingsApiFp = function(configuration?: Configuration) {
    return {
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        settingsGet(
            options?: any
        ): (
            axios?: AxiosInstance,
            basePath?: string
        ) => AxiosPromise<SettingsVm> {
            const localVarAxiosArgs = SettingsApiAxiosParamCreator(
                configuration
            ).settingsGet(options);
            return (
                axios: AxiosInstance = globalAxios,
                basePath: string = BASE_PATH
            ) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {SettingsVm} settings
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        settingsUpdate(
            settings: SettingsVm,
            options?: any
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = SettingsApiAxiosParamCreator(
                configuration
            ).settingsUpdate(settings, options);
            return (
                axios: AxiosInstance = globalAxios,
                basePath: string = BASE_PATH
            ) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url
                };
                return axios.request(axiosRequestArgs);
            };
        }
    };
};

/**
 * SettingsApi - factory interface
 * @export
 */
export const SettingsApiFactory = function(
    configuration?: Configuration,
    basePath?: string,
    axios?: AxiosInstance
) {
    return {
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        settingsGet(options?: any): AxiosPromise<SettingsVm> {
            return SettingsApiFp(configuration).settingsGet(options)(
                axios,
                basePath
            );
        },
        /**
         *
         * @param {SettingsVm} settings
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        settingsUpdate(
            settings: SettingsVm,
            options?: any
        ): AxiosPromise<void> {
            return SettingsApiFp(configuration).settingsUpdate(
                settings,
                options
            )(axios, basePath);
        }
    };
};

/**
 * SettingsApi - object-oriented interface
 * @export
 * @class SettingsApi
 * @extends {BaseAPI}
 */
export class SettingsApi extends BaseAPI {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SettingsApi
     */
    public settingsGet(options?: any) {
        return SettingsApiFp(this.configuration).settingsGet(options)(
            this.axios,
            this.basePath
        );
    }

    /**
     *
     * @param {SettingsVm} settings
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SettingsApi
     */
    public settingsUpdate(settings: SettingsVm, options?: any) {
        return SettingsApiFp(this.configuration).settingsUpdate(
            settings,
            options
        )(this.axios, this.basePath);
    }
}

/**
 * StatusApi - axios parameter creator
 * @export
 */
export const StatusApiAxiosParamCreator = function(
    configuration?: Configuration
) {
    return {
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        statusGet(options: any = {}): RequestArgs {
            const localVarPath = `/api/status`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = {
                method: 'GET',
                ...baseOptions,
                ...options
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = {
                ...localVarUrlObj.query,
                ...localVarQueryParameter,
                ...options.query
            };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...options.headers
            };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @param {UpdateStatus} updateStatus
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        statusUpdate(
            updateStatus: UpdateStatus,
            options: any = {}
        ): RequestArgs {
            // verify required parameter 'updateStatus' is not null or undefined
            if (updateStatus === null || updateStatus === undefined) {
                throw new RequiredError(
                    'updateStatus',
                    'Required parameter updateStatus was null or undefined when calling statusUpdate.'
                );
            }
            const localVarPath = `/api/status`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = {
                method: 'PUT',
                ...baseOptions,
                ...options
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {
                ...localVarUrlObj.query,
                ...localVarQueryParameter,
                ...options.query
            };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...options.headers
            };
            const needsSerialization =
                typeof updateStatus !== 'string' ||
                localVarRequestOptions.headers['Content-Type'] ===
                    'application/json';
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(updateStatus !== undefined ? updateStatus : {})
                : updateStatus || '';

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        }
    };
};

/**
 * StatusApi - functional programming interface
 * @export
 */
export const StatusApiFp = function(configuration?: Configuration) {
    return {
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        statusGet(
            options?: any
        ): (
            axios?: AxiosInstance,
            basePath?: string
        ) => AxiosPromise<StatusVm> {
            const localVarAxiosArgs = StatusApiAxiosParamCreator(
                configuration
            ).statusGet(options);
            return (
                axios: AxiosInstance = globalAxios,
                basePath: string = BASE_PATH
            ) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {UpdateStatus} updateStatus
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        statusUpdate(
            updateStatus: UpdateStatus,
            options?: any
        ): (
            axios?: AxiosInstance,
            basePath?: string
        ) => AxiosPromise<StatusVm> {
            const localVarAxiosArgs = StatusApiAxiosParamCreator(
                configuration
            ).statusUpdate(updateStatus, options);
            return (
                axios: AxiosInstance = globalAxios,
                basePath: string = BASE_PATH
            ) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url
                };
                return axios.request(axiosRequestArgs);
            };
        }
    };
};

/**
 * StatusApi - factory interface
 * @export
 */
export const StatusApiFactory = function(
    configuration?: Configuration,
    basePath?: string,
    axios?: AxiosInstance
) {
    return {
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        statusGet(options?: any): AxiosPromise<StatusVm> {
            return StatusApiFp(configuration).statusGet(options)(
                axios,
                basePath
            );
        },
        /**
         *
         * @param {UpdateStatus} updateStatus
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        statusUpdate(
            updateStatus: UpdateStatus,
            options?: any
        ): AxiosPromise<StatusVm> {
            return StatusApiFp(configuration).statusUpdate(
                updateStatus,
                options
            )(axios, basePath);
        }
    };
};

/**
 * StatusApi - object-oriented interface
 * @export
 * @class StatusApi
 * @extends {BaseAPI}
 */
export class StatusApi extends BaseAPI {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StatusApi
     */
    public statusGet(options?: any) {
        return StatusApiFp(this.configuration).statusGet(options)(
            this.axios,
            this.basePath
        );
    }

    /**
     *
     * @param {UpdateStatus} updateStatus
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StatusApi
     */
    public statusUpdate(updateStatus: UpdateStatus, options?: any) {
        return StatusApiFp(this.configuration).statusUpdate(
            updateStatus,
            options
        )(this.axios, this.basePath);
    }
}
